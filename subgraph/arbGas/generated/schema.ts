// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class blockInfo extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save blockInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type blockInfo must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("blockInfo", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): blockInfo | null {
    return changetype<blockInfo | null>(
      store.get_in_block("blockInfo", id.toHexString())
    );
  }

  static load(id: Bytes): blockInfo | null {
    return changetype<blockInfo | null>(
      store.get("blockInfo", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get gasBlocklog(): BigInt {
    let value = this.get("gasBlocklog");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasBlocklog(value: BigInt) {
    this.set("gasBlocklog", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get l2GasPrice(): BigInt | null {
    let value = this.get("l2GasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set l2GasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("l2GasPrice");
    } else {
      this.set("l2GasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get l1GasPrice(): BigInt {
    let value = this.get("l1GasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set l1GasPrice(value: BigInt) {
    this.set("l1GasPrice", Value.fromBigInt(value));
  }

  get l1PricingSurplus(): BigInt {
    let value = this.get("l1PricingSurplus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set l1PricingSurplus(value: BigInt) {
    this.set("l1PricingSurplus", Value.fromBigInt(value));
  }

  get l1BlockNumber(): BigInt | null {
    let value = this.get("l1BlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set l1BlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("l1BlockNumber");
    } else {
      this.set("l1BlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get batchNum(): BigInt | null {
    let value = this.get("batchNum");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set batchNum(value: BigInt | null) {
    if (!value) {
      this.unset("batchNum");
    } else {
      this.set("batchNum", Value.fromBigInt(<BigInt>value));
    }
  }
}
